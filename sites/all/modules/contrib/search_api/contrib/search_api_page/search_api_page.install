<?php

/**
 * Implements hook_schema().
 */
function search_api_page_schema() {
  $schema['search_api_page'] = array(
    'description' => '',
    'fields' => array(
      'id' => array(
        'description' => 'The primary identifier for a search page.',
        'type' => 'serial',
        'unsigned' => TRUE,
        'not null' => TRUE,
      ),
      'index_id' => array(
        'description' => 'The {search_api_index}.machine_name this page will search on.',
        'type' => 'varchar',
        'length' => 50,
        'not null' => TRUE,
      ),
      'path' => array(
        'description' => 'The path at which this search page can be viewed.',
        'type' => 'varchar',
        'length' => 50,
        'not null' => TRUE,
      ),
      'name' => array(
        'description' => 'The displayed name for a search page.',
        'type' => 'varchar',
        'length' => 50,
        'not null' => TRUE,
      ),
      'description' => array(
        'description' => 'The displayed description for a search page.',
        'type' => 'text',
        'not null' => FALSE,
      ),
      'options' => array(
        'description' => 'The options used to configure the search page.',
        'type' => 'text',
        'serialize' => TRUE,
        'not null' => TRUE,
      ),
      'enabled' => array(
        'description' => 'A flag indicating whether the search page is enabled.',
        'type' => 'int',
        'size' => 'tiny',
        'not null' => TRUE,
        'default' => 1,
      ),
    ),
    'indexes' => array(
      'enabled'  => array('enabled'),
      'index_id' => array('index_id'),
    ),
    'unique' => array(
      'path'  => array('path'),
    ),
    'primary key' => array('id'),
  );

  return $schema;
}

/**
 * Implements hook_requirements().
 */
function search_api_page_requirements($phase) {
  $t = get_t();
  $ret['search_api_page']['title'] = $t('Search pages');
  $ret['search_api_page']['value'] = $t('deprecated');
  $ret['search_api_page']['description'] = $t('This module was moved out of the core Search API project. ' .
      'To keep using it, please download the separate module from <a href="@url">its project page</a>. ' .
      'To get rid of this error message delete the old module under @path after downloading the new one.' .
      'The legacy module used now will soon be removed.',
      array('@url' => url('http://drupal.org/project/search_api_page'), '@path' => DRUPAL_ROOT . drupal_get_path('module', 'search_api_page')));
  $ret['search_api_page']['severity'] = REQUIREMENT_ERROR;

  return $ret;
}

/**
 * Implements hook_update_dependencies().
 */
function search_api_page_update_dependencies() {
  // This update should run after primary IDs have been changed to machine names in the framework.
  $dependencies['search_api_page'][7101] = array(
    'search_api' => 7102,
  );
  return $dependencies;
}

/**
 * Make {search_api_page}.index_id the index' machine name.
 */
function search_api_page_update_7101() {
  // Update of search_api_page:
  db_drop_index('search_api_page', 'index_id');
  $spec = array(
    'description' => 'The {search_api_index}.machine_name this page will search on.',
    'type' => 'varchar',
    'length' => 50,
    'not null' => TRUE,
  );
  db_change_field('search_api_page', 'index_id', 'index_id', $spec);
  db_add_index('search_api_page', 'index_id', array('index_id'));

  foreach (db_query('SELECT id, machine_name FROM {search_api_index}') as $index) {
    // We explicitly forbid numeric machine names, therefore we don't have to worry about conflicts here.
    db_update('search_api_page')
      ->fields(array(
        'index_id' => $index->machine_name,
      ))
      ->condition('index_id', $index->id)
      ->execute();
  }
}
